    vs_id_check:\n    clean_log("PASO 9: Iniciando verificación/creación de VS_ID...");\n    if (empty($vectorStoreId)) {\n        clean_log("PASO 9: VS_ID faltante, creando Vector Store para usuario...");\n        \n        // Crear Vector Store\n        $vsResult = executeOpsOperation($ops, 'vs.store.create', [\n            'VS_NAME' => "CATAI_VS_User_{$userId}",\n            'API_KEY' => $apiKeyPlain\n        ], $apiKeyPlain);\n\n        $vectorStoreId = $vsResult['id'] ?? '';\n        if (!$vectorStoreId) {\n            clean_log("PASO 9 ERROR: No se pudo obtener VS_ID del create");\n            throw new Exception('No se pudo obtener VS_ID del create');\n        }\n        \n        // Guardar en tabla ai_vector_stores\n        $stmt = $pdo->prepare("INSERT INTO ai_vector_stores (provider_id, external_id, owner_user_id, name, status) VALUES (?, ?, ?, ?, 'ready')");\n        $stmt->execute([$providerId, $vectorStoreId, $userId, "CATAI_VS_User_{$userId}"]);\n        $vectorStoreRecordId = (int)$pdo->lastInsertId();\n\n        // Actualizar knowledge_files\n        $stmt = $pdo->prepare("UPDATE knowledge_files SET vector_store_id = ?, vector_store_local_id = ? WHERE id = ?");\n        $stmt->execute([$vectorStoreId, $vectorStoreRecordId, $fileId]);\n        $fileDb['vector_store_id'] = $vectorStoreId;\n        $fileDb['vector_store_local_id'] = $vectorStoreRecordId;\n        \n        clean_log("PASO 9 OK: Vector Store creado con VS_ID: $vectorStoreId");\n    }\n    else {\n        // Verificar que el VS_ID existe en OpenAI (según referencia)\n        clean_log("Verificando VS_ID existente en OpenAI: $vectorStoreId");\n        try {\n            $vsCheck = executeOpsOperation($ops, 'vs.store.get', [\n                'VS_ID' => $vectorStoreId,\n                'API_KEY' => $apiKeyPlain\n            ], $apiKeyPlain);\n            clean_log("VS_ID verificado exitosamente en OpenAI");\n        } catch (Exception $e) {\n            clean_log("ERROR: VS_ID no válido en OpenAI: " . $e->getMessage());\n            clean_log("Reseteando VS_ID para re-crear Vector Store...");\n            \n            // Resetear VS_ID en BD\n            $stmt = $pdo->prepare("UPDATE knowledge_files SET vector_store_id = NULL WHERE id = ?");\n            $stmt->execute([$fileId]);\n            $vectorStoreId = '';\n            \n            goto vs_id_check;\n        }\n    }\n    \n    clean_log("PASO 9 OK: VS_ID verificado/creado: $vectorStoreId");\n    \n    // ===== CHEQUEO 3: VINCULAR FILE AL VS =====\n    // Verificar si el FILE ya está en el VS (según referencia)\n    $alreadyLinked = false;\n    if (!empty($vectorStoreId)) {\n        clean_log("Verificando si FILE_ID ya está vinculado al VS...");\n        try {\n            $r = executeOpsOperation($ops, 'vs.store.file.get', [\n                'VS_ID' => $vectorStoreId,\n                'FILE_ID' => $openaiFileId,\n                'API_KEY' => $apiKeyPlain\n            ], $apiKeyPlain);\n            $alreadyLinked = ($r['status'] ?? null) !== null; // 200 => existe\n            clean_log("FILE ya está vinculado al VS: " . ($alreadyLinked ? 'Sí' : 'No'));\n        } catch (Exception $e) {\n            clean_log("Error verificando vínculo FILE-VS: " . $e->getMessage());\n            $alreadyLinked = false;\n        }\n    }\n    \n    if (!$alreadyLinked) {\n        clean_log("Adjuntando archivo al Vector Store...");\n        executeOpsOperation($ops, 'vs.attach', [\n            'VS_ID' => $vectorStoreId,\n            'FILE_ID' => $openaiFileId,\n            'API_KEY' => $apiKeyPlain\n        ], $apiKeyPlain);\n        clean_log("Archivo adjuntado al Vector Store");\n    }\n    \n    // ===== CHEQUEO 4: ASSISTANT_ID =====
